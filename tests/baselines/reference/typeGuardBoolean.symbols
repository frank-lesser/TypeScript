=== tests/cases/conformance/expressions/typeGuards/typeGuardBoolean.ts ===
function test(strOrNull: string | null, strOrUndefined: string | undefined) {
>test : Symbol(test, Decl(typeGuardBoolean.ts, 0, 0))
>strOrNull : Symbol(strOrNull, Decl(typeGuardBoolean.ts, 0, 14))
>strOrUndefined : Symbol(strOrUndefined, Decl(typeGuardBoolean.ts, 0, 39))

  var str: string = "original";
>str : Symbol(str, Decl(typeGuardBoolean.ts, 1, 5))

  var nil: null;
>nil : Symbol(nil, Decl(typeGuardBoolean.ts, 2, 5))

  if (!Boolean(strOrNull)) {
>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>strOrNull : Symbol(strOrNull, Decl(typeGuardBoolean.ts, 0, 14))

      nil = strOrNull;
>nil : Symbol(nil, Decl(typeGuardBoolean.ts, 2, 5))
>strOrNull : Symbol(strOrNull, Decl(typeGuardBoolean.ts, 0, 14))
  }
  else {
      str = strOrNull;
>str : Symbol(str, Decl(typeGuardBoolean.ts, 1, 5))
>strOrNull : Symbol(strOrNull, Decl(typeGuardBoolean.ts, 0, 14))
  }
  if (Boolean(strOrUndefined)) {
>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>strOrUndefined : Symbol(strOrUndefined, Decl(typeGuardBoolean.ts, 0, 39))

      str = strOrUndefined;
>str : Symbol(str, Decl(typeGuardBoolean.ts, 1, 5))
>strOrUndefined : Symbol(strOrUndefined, Decl(typeGuardBoolean.ts, 0, 39))
  }
}

